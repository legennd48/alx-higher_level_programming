======================
Module: 100-matrix_mul
======================
Tests the Matrix multiplication Function
=====================

# First import the function.
>>> lazy_matrix_mul = __import__('100-matrix_mul').lazy_matrix_mul

=====================
Success Cases
=====================


# Standard Usage
>>> m_a = [[2, 3], [4, 5]]
>>> m_b = [[2, 1], [3, 2]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[13, 8], [23, 14]]

>>> m_a = [[2, 4]]
>>> m_b = [[1], [3]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[14]]

>>> m_a = [[1, 2]]
>>> m_b = [[3, 4], [5, 6]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[13, 16]]

# Float numbers
>>> m_a = [[1.5, 2.5, 1.2], [3.6, -3.3, 2.2]]
>>> m_b = [[1.0, 2.1], [2.9, 2.4], [3.2, -2.4]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[12.59, 6.27], [1.07, -5.64]]

# Integers and floats
>>> m_a = [[1.2, 1.5, 2.2, 2], [4.66, 3, -1.2, 2]]
>>> m_b = [[1.0, 3.3, 2], [-2.9, 4.4, 1], [2, 3.2, 4.4], [1, 2, 3]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[3.25, 21.6, 19.58], [-4.44, 28.74, 13.04]]

# Fail Cases
>>> print(lazy_matrix_mul([], [[1, 2]]))
Traceback (most recent call last):
    ValueError: m_a can't be empty

>>> print(lazy_matrix_mul([[]], []))
Traceback (most recent call last):
    ValueError: m_a can't be empty

>>> print(lazy_matrix_mul([], [[]]))
Traceback (most recent call last):
    ValueError: m_a can't be empty

>>> print(lazy_matrix_mul("string", [[1, 2]]))
Traceback (most recent call last):
    TypeError: m_a must be a list

>>> print(lazy_matrix_mul([[1, 2]], "string"))
Traceback (most recent call last):
    TypeError: m_b must be a list

>>> print(lazy_matrix_mul("string1", "string2"))
Traceback (most recent call last):
    TypeError: m_a must be a list

>>> print(lazy_matrix_mul(None, None))
Traceback (most recent call last):
    TypeError: m_a must be a list

>>> print(lazy_matrix_mul([1, 2], [3, 4]))
Traceback (most recent call last):
    TypeError: m_a must be a list of lists

>>> print(lazy_matrix_mul([[1, "string"]], [[{"a": 1}, 3.2]]))
Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

>>> m_a = [[5, 6, 10], [7, 8]]
>>> m_b = [[5, 6], [7, 8]]
>>> print(lazy_matrix_mul(m_a, m_b))
Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

>>> m_a = [[5, 6], [7, 8]]
>>> m_b = [[5, 6, 1], [7, 8]]
>>> print(lazy_matrix_mul(m_a, m_b))
Traceback (most recent call last):
    TypeError: each row of m_b must be of the same size

>>> print(lazy_matrix_mul([[5, 6]], [7, 8]))
Traceback (most recent call last):
    TypeError: m_b must be a list of lists

>>> print(lazy_matrix_mul([[5, 6]], [[]]))
Traceback (most recent call last):
    ValueError: m_b can't be empty

>>> m_a = [[3, 4], [5, 6],]
>>> m_b = [[3, 4], [5, 6], [7, 8]]
>>> print(lazy_matrix_mul(m_a, m_b))
Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied

>>> print(lazy_matrix_mul([[1, 2]], [[{"ed": 1}, 2.2]]))
Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

>>> print(lazy_matrix_mul([[1, "string"]], [[3, 4]]))
Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

>>> print(lazy_matrix_mul([1, 2], [[3, 4]]))
Traceback (most recent call last):
    TypeError: m_a must be a list of lists

>>> print(lazy_matrix_mul([[1, 2]], [3, 4]))
Traceback (most recent call last):
    TypeError: m_b must be a list of lists

>>> m_a = [[1, 2], [3, 4, 5]]
>>> m_b = m_a
>>> print(lazy_matrix_mul(m_a, m_b))
Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

>>> lazy_matrix_mul(None, [[1, 2]])
Traceback (most recent call last):
    TypeError: m_a must be a list

>>> lazy_matrix_mul([[1, 2]], None)
Traceback (most recent call last):
    TypeError: m_b must be a list

>>> lazy_matrix_mul([[1, 2]])
Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

>>> lazy_matrix_mul()
Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
# First import the function.
>>> lazy_matrix_mul = __import__('100-matrix_mul').lazy_matrix_mul

# Standard Usage
>>> m_a = [[2, 3], [4, 5]]
>>> m_b = [[2, 1], [3, 2]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[13, 8], [23, 14]]

>>> m_a = [[2, 4]]
>>> m_b = [[1], [3]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[14]]

>>> m_a = [[1, 2]]
>>> m_b = [[3, 4], [5, 6]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[13, 16]]

# Float numbers
>>> m_a = [[1.5, 2.5, 1.2], [3.6, -3.3, 2.2]]
>>> m_b = [[1.0, 2.1], [2.9, 2.4], [3.2, -2.4]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[12.59, 6.27], [1.07, -5.64]]

# Integers and floats
>>> m_a = [[1.2, 1.5, 2.2, 2], [4.66, 3, -1.2, 2]]
>>> m_b = [[1.0, 3.3, 2], [-2.9, 4.4, 1], [2, 3.2, 4.4], [1, 2, 3]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[3.25, 21.6, 19.58], [-4.44, 28.74, 13.04]]

============
# Fail Cases
============

>>> print(lazy_matrix_mul([], [[1, 2]]))
Traceback (most recent call last):
    ValueError: m_a can't be empty

>>> print(lazy_matrix_mul([[]], []))
Traceback (most recent call last):
    ValueError: m_a can't be empty

>>> print(lazy_matrix_mul([], [[]]))
Traceback (most recent call last):
    ValueError: m_a can't be empty

>>> print(lazy_matrix_mul("string", [[1, 2]]))
Traceback (most recent call last):
    TypeError: m_a must be a list

>>> print(lazy_matrix_mul([[1, 2]], "string"))
Traceback (most recent call last):
    TypeError: m_b must be a list

>>> print(lazy_matrix_mul("string1", "string2"))
Traceback (most recent call last):
    TypeError: m_a must be a list

>>> print(lazy_matrix_mul(None, None))
Traceback (most recent call last):
    TypeError: m_a must be a list

>>> print(lazy_matrix_mul([1, 2], [3, 4]))
Traceback (most recent call last):
    TypeError: m_a must be a list of lists

>>> print(lazy_matrix_mul([[1, "string"]], [[{"a": 1}, 3.2]]))
Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

>>> m_a = [[5, 6, 10], [7, 8]]
>>> m_b = [[5, 6], [7, 8]]
>>> print(lazy_matrix_mul(m_a, m_b))
Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

>>> m_a = [[5, 6], [7, 8]]
>>> m_b = [[5, 6, 1], [7, 8]]
>>> print(lazy_matrix_mul(m_a, m_b))
Traceback (most recent call last):
    TypeError: each row of m_b must be of the same size

>>> print(lazy_matrix_mul([[5, 6]], [7, 8]))
Traceback (most recent call last):
    TypeError: m_b must be a list of lists

>>> print(lazy_matrix_mul([[5, 6]], [[]]))
Traceback (most recent call last):
    ValueError: m_b can't be empty

>>> m_a = [[3, 4], [5, 6],]
>>> m_b = [[3, 4], [5, 6], [7, 8]]
>>> print(lazy_matrix_mul(m_a, m_b))
Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied

>>> print(lazy_matrix_mul([[1, 2]], [[{"ed": 1}, 2.2]]))
Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

>>> print(lazy_matrix_mul([[1, "string"]], [[3, 4]]))
Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

>>> print(lazy_matrix_mul([1, 2], [[3, 4]]))
Traceback (most recent call last):
    TypeError: m_a must be a list of lists

>>> print(lazy_matrix_mul([[1, 2]], [3, 4]))
Traceback (most recent call last):
    TypeError: m_b must be a list of lists

>>> m_a = [[1, 2], [3, 4, 5]]
>>> m_b = m_a
>>> print(lazy_matrix_mul(m_a, m_b))
Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

>>> lazy_matrix_mul(None, [[1, 2]])
Traceback (most recent call last):
    TypeError: m_a must be a list

>>> lazy_matrix_mul([[1, 2]], None)
Traceback (most recent call last):
    TypeError: m_b must be a list

>>> lazy_matrix_mul([[1, 2]])
Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

>>> lazy_matrix_mul()
Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
