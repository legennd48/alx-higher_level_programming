=================
0-add_integer.py
=================

This module defines the test and usage of the add_integer function

=================
SUCCESS CASES
=================

we first import the function

    >>> add_integer = __import__('0-add_integer').add_integer

::

    >>> add_integer(9, 2)
    11

::

    >>> add_integer(-14, 11)
    -3

testing default value of b
::

    >>> print(add_integer(1))
    99

Testing floating float values.

::

    >>> add_integer(4.0, 3.0)
    7

More tests to ensure that int casting works as it should.

::

    >>> add_integer(3.6, 1.4)
    4

::

    >>> add_integer(-2.9, -0.2)
    -2

Floating and non-floating point values can be combined.

::

    >>> add_integer(2.3, -3)
    -1

=============
Fail Casses:
=============

Test non int/ float Values for a or b

    >>> add_integer("grand", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "master")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(4.5, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

::
    >>> add_integer(None, 23)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test when neither a nor b are integers
::

    >>> add_integer("Grand", "master")
    Traceback (most recent call last):
    TypeError: a must be an integer


Test extra arguments

::
    >>> add_integer(1, 2, 3)
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 0-add_integer.txt[14]>", line 1, in <module>
        add_integer(1, 2, 3)
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

The function causes 'OverflowError' if infinity is provided as value for either a or b.

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer


::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer


ValueError for Non assigned Number NaN.

::

    >>> add_integer(5, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
