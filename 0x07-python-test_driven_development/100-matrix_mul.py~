#!/usr/bin/python3
"""
Module: 100-matrix_mul
Contains method that does matrix multiplication
Requires same size lists/rows of ints or floats
"""


def matrix_mul(m_a, m_b):
    """
    Returns resulting matrix multiplication
    """
    if not isinstance(m_a, list) or not isinstance(m_b, list):
        raise TypeError("{} must be a list".format
                        ("m_a" if not isinstance(m_a, list) else "m_b"))

    if len(m_a) == 0 or len(m_b) == 0 or m_a == [[]] or m_b == [[]]:
        raise ValueError("{} can't be empty".format
                         ("m_a" if len(m_a) == 0 else "m_b"))

    for each_row in m_a:
        for num in each_row:
            if not isinstance(num, (int, float)):
                raise TypeError("m_a should contain only integers or floats")
        if len(each_row) != len(m_a[0]):
            raise TypeError("each row of m_a must be of the same size")
        if len(each_row) != len(m_b):
            raise ValueError("m_a and m_b can't be multiplied")

    for each_row in m_b:
        for num in each_row:
            if not isinstance(num, (int, float)):
                raise TypeError("m_b should contain only integers or floats")
        if len(each_row) != len(m_b[0]):
            raise TypeError("each row of m_b must be of the same size")

    result_matrix = []
    temp_row = []
    temp_sum = 0
    for row_a in range(len(m_a)):
        temp_row = []
        for col_b in range(len(m_b[0])):
            for i in range(len(m_a[0])):
                temp_sum += m_a[row_a][i] * m_b[i][col_b]
            temp_row.append(temp_sum)
            temp_sum = 0
        result_matrix.append(temp_row)

    return result_matrix
